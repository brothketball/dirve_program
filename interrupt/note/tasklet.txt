一、tasklet相关知识点
1、什么是tasklet？
    tasklet是中断处理机制处理中断下文常用的一种方法，是一种特殊的软中断。
处理中断下文的机制还要工作队列和中断
2、怎么使用tasklet来设计中断下文？
    流程：中断发生-中断上文处理紧急事情-调用tasklet-中断下文处理耗时事情
    Linux将中断分为上半部分和下半部分，上半部分处理紧急事件，并可以调用tasklet来启动
中断下文，调用tasklet后，其绑定的函数不会马上执行，而是出中断后，经过一个很短的不确定时间再执行
3、tasklet定义
    tasklet由tasklet_struct结构表示，每个结构体单独代表一个tasklet，
定义在源码/include/linux/interrupt.h
struct tasklet_struct
{
	struct tasklet_struct *next;//链表
	unsigned long state;
	atomic_t count;
	bool use_callback;
	union {
		void (*func)(unsigned long data);
		void (*callback)(struct tasklet_struct *t);
	};
	unsigned long data;
};
next：链表中的下一个tasklet，方便管理和设置tasklet
state：tasklet的状态
count：表示tasklet是否在激活状态，若未0，则在激活状态；若非0，则在非激活状态
union：一个带有多成员的共用体，但是任何时候只能有一个成员带有值
	void (*func)(unsigned long data)：结构体中的func成员是tasklet的绑定函数，data是它的唯一参数
data：函数执行的时候传递的参数
其中func和data参数更加重要

二、tasklet相关函数
<1>tasklet_schedule函数
作用：调用tasklet
函数原型：
void tasklet_schedule(struct tasklet_struct *t)
参数：
*t：指向tasklet_struct结构体的指针

<2>tasklet_init函数
作用：动态初始化tasklet（还有另一个静态初始化）
函数原型：
void tasklet_init(struct tasklet_struct *t,void (*func)(unsigned long),unsigned long data);
参数：
*t：指向tasklet_struct结构体的指针
func：tasklet绑定的函数
data：函数执行的时候传递的参数

<3>tasklet_kill函数
作用：删除tasklet
函数原型：
void tasklet_kill(struct tasklet_struct *t)
参数：
*t：指向tasklet_struct结构体的指针
注意：这个函数会等待tasklet执行完毕，然后再将它移除。
	该函数可能会引起休眠，所以要禁止在中断上下文中使用。

三、使用tasklet设计中断下文的步骤
	步骤一：定义一个tasklet结构体
	步骤二：动态初始化tasklet
	步骤三：编写tasklet绑定的函数
	步骤四：在中断上文调用tasklet
	步骤五：卸载模块的时候删除tasklet