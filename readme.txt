驱动分为四部分：
头文件
#include<linux/init.h>//包含宏定义的头文件
#include<linux/module.h>//包含初始化加载模块的头文件

驱动模块的入口和出口
module_init(hello_init);
module_exit(hello_exit);

声明信息
MODULE_LICENSE("GPL");

功能实现
static int hello_init(void)
{
	printk("Hello world!\r\n");
	return 0;
}

static voif hello_exit(void)
{
	printk("Bye!\r\n");
}

编译驱动的方法：
方法一：
把驱动编译成模块，然后使用命令把驱动加载到内核里面
方法二：
直接把驱动编译到内核

方法一步骤：
第一步：
先写一个Makefile，可参考first_drive中的Makefile
第二步：
编译驱动
编译驱动之前需要注意的问题：
1、内核源码一定要先编译通过
2、我们编译驱动模块用的内核源码一定要和我们开发板上运行的内核镜像是同一套
3、查看架构是否为arm，若为X86，需要改为arm
	通过export ARCH=arm来改变环境为arm

杂项设备驱动简单的开发流程：
1 驱动会自动申请设备号
2 注册设备，自动生成设备节点
3 驱动传参函数编写
3.5 对硬件进行操作，需要将物理地址转换为虚拟地址（可选）
4 手动注销设备，自动释放设备节点，手动释放虚拟地址
5 编写应用，通过设备节点与驱动进行数据传输，即内核层和应用层的数据传输

字符设备驱动简单的开发流程：
1 静态或动态申请设备号
2 注册设备，命令行或代码手动生成设备节点
3 驱动传参函数编写
3.5 对硬件进行操作，需要将物理地址转换为虚拟地址（可选）
4 手动注销设备，自动释放设备节点，手动释虚拟地址
5 编写应用，通过设备节点与驱动进行数据传输，即内核层和应用层的数据传输

设备名和对应主设备号在 /proc/devices 文件中
设备节点在 /dev 目录下（杂项设备一般自动生成在该目录下，字符设备手动生成不一定）
而主次设备号可以通过 ls -lh /dev 查看得知，主次设备号依次在文件名后
平台总线进行匹配时用到的name，insmod时会在/sys/bus/platform/devices下生成名为name的文件

后台运行程序命令，cmd &
如：./app &